<?xml version="1.0" encoding="utf-8"?>
<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" paddingLeft="2" paddingTop="0" paddingBottom="0" verticalAlign="middle">
	<mx:Script>
		<![CDATA[
        import org.jbei.registry.utils.Finder;

        public static const FIND:String = "Find";
        public static const FIND_NEXT:String = "FindNext";
        public static const HIGHLIGHT:String = "Hightlight";
        public static const CLEAR_HIGHLIGHT:String = "ClearHightlight";
        public static const HIDE_FIND_PANEL:String = "HideFindPanel";

        public var findExpression:String = "";
        public var dataType:String = Finder.DATA_TYPE_DNA;
        public var searchType:String = Finder.SEARCH_TYPE_LITERAL;

        [Embed(source='../assets/icons/close.png')]
        [Bindable]
        private var closeIcon:Class;

        // Public Methods
        public function updateHighlight():void {
            if (!isVisible()) {
                return;
            }

            if (highlightAllButton.selected) {
                highlight();
            }
        }

        public function show():void {
            if (isVisible()) {
                return;
            }

            clearControls();

            visible = true;
            includeInLayout = true;

            // This hack fixes flex bug with setFocus after menu action
            this.callLater(function ():void {
                findTextInput.setFocus();
            });
        }

        public function hide():void {
            if (!isVisible()) {
                return;
            }

            clearControls();
            clearHighlight();

            visible = false;
            includeInLayout = false;
        }

        public function highlightFindBox(found:Boolean):void {
            if (found || findTextInput.text == "") {
                highlightFindBoxDefault();
            } else {
                highlightFindBoxError()
            }
        }

        // Event Handlers
        private function isVisible():Boolean {
            return visible;
        }

        private function onFindTextInputChange(event:Event):void {
            findExpression = findTextInput.text;

            find();

            updateHighlight();
        }

        private function onFindNextButtonClick(event:MouseEvent):void {
            findNext();
        }

        private function onHighlightAllButtonChange(event:Event):void {
            if (highlightAllButton.selected) {
                highlight();
            } else {
                clearHighlight();
            }
        }

        private function onXButtonClick(event:MouseEvent):void {
            dispatchEvent(new Event(HIDE_FIND_PANEL));
        }

        private function onDataTypeComboBoxChange(event:Event):void {
            findTextInput.setFocus();

            dataType = (dataTypeComboBox.value as String)

            find();

            if (highlightAllButton.selected) {
                highlight();
            }
        }

        private function onSearchTypeComboBoxChange(event:Event):void {
            findTextInput.setFocus();

            searchType = (searchTypeComboBox.value as String)

            find();

            if (highlightAllButton.selected) {
                highlight();
            }
        }

        private function onFocusIn(event:FocusEvent):void {
            if (findTextInput.text == "Search ...") {
                findTextInput.text = "";
                findTextInput.setStyle("color", "#000000");
            }
        }

        private function onFocusOut(event:FocusEvent):void {
            if (findTextInput.text == "") {
                findTextInput.text = "Search ...";
                findTextInput.setStyle("color", "#808080");
            }
        }

        // Private Methods
        private function clearControls():void {
            findTextInput.text = "";
            highlightAllButton.selected = false;
            highlightFindBoxDefault();
        }

        private function highlight():void {
            dispatchEvent(new Event(HIGHLIGHT));
        }

        private function clearHighlight():void {
            dispatchEvent(new Event(CLEAR_HIGHLIGHT));
        }

        private function find():void {
            dispatchEvent(new Event(FIND));
        }

        private function findNext():void {
            dispatchEvent(new Event(FIND_NEXT));
        }

        private function highlightFindBoxError():void {
            findTextInput.setStyle("backgroundColor", 0xFF6666);
            findTextInput.setStyle("color", 0xFFFFFF);
        }

        private function highlightFindBoxDefault():void {
            findTextInput.setStyle("backgroundColor", 0xFFFFFF);
            findTextInput.setStyle("color", 0x000000);
        }
        ]]>
	</mx:Script>
	
	<mx:Button id="xButton" icon="{ closeIcon }" width="20" height="20" focusEnabled="false" click="onXButtonClick(event)"/>
	<mx:TextInput id="findTextInput" text="Search ..." width="250" change="onFindTextInputChange(event)" focusIn="onFocusIn(event)" focusOut="onFocusOut(event)"/>
	<mx:Button id="findNextButton" label="Find Next" click="onFindNextButtonClick(event)"/>
	<mx:ComboBox id="dataTypeComboBox" labelField="label" change="onDataTypeComboBoxChange(event)">
		<mx:ArrayCollection>
			<mx:Object label="DNA" data="{ Finder.DATA_TYPE_DNA }"/>
			<mx:Object label="Amino Acids" data="{ Finder.DATA_TYPE_AMINO_ACIDS }"/>
		</mx:ArrayCollection>
	</mx:ComboBox>
	<mx:ComboBox id="searchTypeComboBox" labelField="label" change="onSearchTypeComboBoxChange(event)">
		<mx:ArrayCollection>
			<mx:Object label="Literal" data="{ Finder.SEARCH_TYPE_LITERAL }"/>
			<mx:Object label="Ambiguous" data="{ Finder.SEARCH_TYPE_AMBIGUOUS }"/>
		</mx:ArrayCollection>
	</mx:ComboBox>
	<mx:Button id="highlightAllButton" label="Highlight All" toggle="true" selected="false" change="onHighlightAllButtonChange(event)"/>
</mx:HBox>
