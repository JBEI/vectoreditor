<?xml version="1.0" encoding="utf-8"?>
<mx:Box creationComplete="onCreationComplete()" width="100%" xmlns:mx="http://www.adobe.com/2006/mxml" borderThickness="0" paddingBottom="0" paddingTop="0" verticalGap="0">
	<mx:Script>
		<![CDATA[
            import mx.events.MenuEvent;
            
            import org.jbei.lib.ui.menu.MenuItem;
            import org.jbei.lib.ui.menu.MenuItemEvent;
			
			// File
            public static const SAVE_TO_REGISTRY:String = "SaveToRegistry";
            public static const DOWNLOAD_SEQUENCE:String = "DownloadSequence";
            public static const DOWNLOAD_SBOL:String = "DownloadSBOL";
			public static const SAVE_PROJECT:String = "SaveProject";
            public static const SAVE_PROJECT_AS:String = "SaveProjectAs";
            public static const SHOW_PROJECT_PROPERTIES_DIALOG:String = "ShowProjectPropertiesDialog";
            public static const IMPORT_SEQUENCE:String = "ImportSequence";
			public static const PRINT_SEQUENCE:String = "PrintSequence";
			public static const PRINT_PIE:String = "PrintPie";
			public static const PRINT_RAIL:String = "PrintRail";
			public static const SHOW_PROPERTIES_DIALOG:String = "ShowPropertiesDialog";
			
			// Edit
			public static const COPY:String = "Copy";
			public static const CUT:String = "Cut";
			public static const PASTE:String = "Paste";
			public static const SELECT_ALL:String = "SelectAll";
            public static const SELECT_INVERSE:String = "SelectInverse";
			public static const UNDO:String = "Undo";
			public static const REDO:String = "Redo";
			public static const SHOW_SELECT_BY_RANGE_DIALOG:String = "ShowSelectByRangeDialog";
			public static const SHOW_GOTO_DIALOG:String = "ShowGoToDialog";
			public static const SHOW_FIND_DIALOG:String = "ShowFindDialog";
			public static const SAFE_EDITING_CHANGED:String = "SafeEditingChanged";
            public static const REVERSE_COMPLEMENT:String = "ReverseComplement";
            public static const REBASE_SEQUENCE:String = "RebaseSequence";
			
			// View
			public static const SHOW_RAIL:String = "ShowRail";
			public static const SHOW_PIE:String = "ShowPie";
			public static const SHOW_FEATURES_STATE_CHANGED:String = "ShowFeaturesStateChanged";
			public static const SHOW_CUTSITES_STATE_CHANGED:String = "ShowCutSitesStateChanged";
			public static const SHOW_ORFS_STATE_CHANGED:String = "ShowORFsStateChanged";
			public static const SHOW_COMPLEMENTARY_STATE_CHANGED:String = "ShowComplementaryStateChanged";
			public static const SHOW_AA1_STATE_CHANGED:String = "ShowAA1StateChanged";
			public static const SHOW_AA1_REVCOM_STATE_CHANGED:String = "ShowAA1RevComStateChanged";
			public static const SHOW_AA3_STATE_CHANGED:String = "ShowAA3StateChanged";
			public static const SHOW_SPACES_STATE_CHANGED:String = "ShowSpacesStateChanged";
			public static const SHOW_FEATURE_LABELS_STATE_CHANGED:String = "ShowFeatureLabelsStateChanged";
			public static const SHOW_CUT_SITE_LABELS_STATE_CHANGED:String = "ShowCutSiteLabelsStateChanged";
			
			// Tools
			public static const SHOW_RESTRICTION_ENZYMES_MANAGER_DIALOG:String = "ShowRestrictionEnzymesManagerDialog";
			public static const SHOW_CREATE_NEW_FEATURE_DIALOG:String = "ShowCreateNewFeatureDialog";
            public static const SHOW_SIMULATE_DIGESTION_DIALOG:String = "ShowSimulateDigestionDialog";
			public static const SHOW_PREFERENCES_DIALOG:String = "ShowPreferencesDialog";
			
			// About
			public static const GO_REPORT_BUG_WEB_LINK:String = "GoReportBugWebLink";
			public static const GO_SUGGEST_FEATURE_WEB_LINK:String = "GoSuggestFeatureWebLink";
			public static const SHOW_ABOUT_DIALOG:String = "ShowAboutDialog";
			
			private var menuItemsMap:Dictionary = new Dictionary();
			
			[Bindable]
			private var menuItems:Array;
			
			public function menuItemByName(name:String):MenuItem
			{
				return menuItemsMap[name];
			}
			
			private function onCreationComplete():void
            {
            	initializeMenu();
            }
            
            private function initializeMenu():void
            {
            	var separatorMenuItem:MenuItem = new MenuItem("", "", "separator");
            	
            	// File
            	var fileMenuItem:MenuItem = new MenuItem("fileMenuItem", "File");
                var saveToRegistryMenuItem:MenuItem = new MenuItem("saveToRegistryMenuItem", "Save");
                var saveProjectMenuItem:MenuItem = new MenuItem("saveProjectMenuItem", "Save Project");
                var saveProjectAsMenuItem:MenuItem = new MenuItem("saveProjectAsMenuItem", "Save Project As ...");
                var projectPropertiesMenuItem:MenuItem = new MenuItem("projectPropertiesMenuItem", "Project Properties");
                var downloadSequenceMenuItem:MenuItem = new MenuItem("downloadSequenceMenuItem", "Download Genbank");
                var downloadSBOLMenuItem:MenuItem = new MenuItem("downloadSBOLMenuItem", "Download SBOL");
                var importSequenceMenuItem:MenuItem = new MenuItem("importSequenceMenuItem", "Import From File");
            	var printMenuItem:MenuItem = new MenuItem("printMenuItem", "Print");
                var printSequenceMenuItem:MenuItem = new MenuItem("printSequenceMenuItem", "Sequence");
				var printPieMenuItem:MenuItem = new MenuItem("printPieMenuItem", "Circular View");
				var printRailMenuItem:MenuItem = new MenuItem("printRailMenuItem", "Linear View");
                
                CONFIG::registryEdition {
                    fileMenuItem.addSubItem(saveProjectMenuItem);
                    fileMenuItem.addSubItem(saveProjectAsMenuItem);
                    fileMenuItem.addSubItem(projectPropertiesMenuItem);
                    fileMenuItem.addSubItem(separatorMenuItem);
                    fileMenuItem.addSubItem(importSequenceMenuItem);
                    fileMenuItem.addSubItem(separatorMenuItem);
                }
                
                CONFIG::standalone {
                    //fileMenuItem.addSubItem(saveToRegistryMenuItem);
                    //fileMenuItem.addSubItem(separatorMenuItem);
                    //fileMenuItem.addSubItem(saveProjectMenuItem);
                    //fileMenuItem.addSubItem(saveProjectAsMenuItem);
                    //fileMenuItem.addSubItem(separatorMenuItem);
                    fileMenuItem.addSubItem(importSequenceMenuItem);
                    fileMenuItem.addSubItem(downloadSequenceMenuItem);
                    fileMenuItem.addSubItem(downloadSBOLMenuItem);
                    fileMenuItem.addSubItem(separatorMenuItem);
                    fileMenuItem.addSubItem(projectPropertiesMenuItem);
                }
                
                CONFIG::entryEdition {
                    fileMenuItem.addSubItem(saveToRegistryMenuItem);
                    fileMenuItem.addSubItem(separatorMenuItem);
                    fileMenuItem.addSubItem(importSequenceMenuItem);
                    fileMenuItem.addSubItem(downloadSequenceMenuItem);
                    fileMenuItem.addSubItem(downloadSBOLMenuItem);
                    fileMenuItem.addSubItem(separatorMenuItem);
                }
                
                fileMenuItem.addSubItem(printMenuItem);
            	
                // File -> Print
                printMenuItem.addSubItem(printSequenceMenuItem);
                printMenuItem.addSubItem(printPieMenuItem);
                printMenuItem.addSubItem(printRailMenuItem);
                
            	// Edit
            	var editMenuItem:MenuItem = new MenuItem("editMenuItem", "Edit");
            	var undoMenuItem:MenuItem = new MenuItem("undoMenuItem", "Undo", "", false, false, false);
            	var redoMenuItem:MenuItem = new MenuItem("redoMenuItem", "Redo", "", false, false, false);
            	var copyMenuItem:MenuItem = new MenuItem("copyMenuItem", "Copy", "", false, false, false);
            	var cutMenuItem:MenuItem = new MenuItem("cutMenuItem", "Cut", "", false, false, false);
            	var pasteMenuItem:MenuItem = new MenuItem("pasteMenuItem", "Paste");
				var safeEditingMenuItem:MenuItem = new MenuItem("safeEditingMenuItem", "Safe Editing", "check", true);
            	var selectMenuItem:MenuItem = new MenuItem("selectMenuItem", "Select...");
            	var selectAllMenuItem:MenuItem = new MenuItem("selectAllMenuItem", "Select All");
                var selectInverseMenuItem:MenuItem = new MenuItem("selectInverseMenuItem", "Select Inverse");
				var findMenuItem:MenuItem = new MenuItem("findMenuItem", "Find...");
				var gotoMenuItem:MenuItem = new MenuItem("gotoMenuItem", "Go To...");
                var reverseComplementMenuItem:MenuItem = new MenuItem("reverseComplementMenuItem", "Reverse Complement");
                var rebaseMenuItem:MenuItem = new MenuItem("rebaseMenuItem", "Rotate to Here");
                editMenuItem.addSubItem(undoMenuItem);
            	editMenuItem.addSubItem(redoMenuItem);
            	editMenuItem.addSubItem(separatorMenuItem);
            	editMenuItem.addSubItem(copyMenuItem);
            	editMenuItem.addSubItem(cutMenuItem);
            	editMenuItem.addSubItem(pasteMenuItem);
				editMenuItem.addSubItem(separatorMenuItem);
				editMenuItem.addSubItem(safeEditingMenuItem);
				editMenuItem.addSubItem(separatorMenuItem);
				editMenuItem.addSubItem(findMenuItem);
				editMenuItem.addSubItem(gotoMenuItem);
				editMenuItem.addSubItem(separatorMenuItem);
				editMenuItem.addSubItem(selectMenuItem);
				editMenuItem.addSubItem(selectAllMenuItem);
                editMenuItem.addSubItem(selectInverseMenuItem);
                editMenuItem.addSubItem(separatorMenuItem);
                editMenuItem.addSubItem(reverseComplementMenuItem);
                editMenuItem.addSubItem(rebaseMenuItem);
                
				// View
            	var viewMenuItem:MenuItem = new MenuItem("viewMenuItem", "View");
				var showPieMenuItem:MenuItem = new MenuItem("showPieMenuItem", "Circular", "check", true);
				var showRailMenuItem:MenuItem = new MenuItem("showRailMenuItem", "Linear", "check", false);
            	var showFeaturesMenuItem:MenuItem = new MenuItem("showFeaturesMenuItem", "Features", "check", true);
            	var showCutSitesMenuItem:MenuItem = new MenuItem("showCutSitesMenuItem", "Cut Sites", "check", false);
            	var showORFsMenuItem:MenuItem = new MenuItem("showORFsMenuItem", "ORF", "check", false);
            	var showComplementaryMenuItem:MenuItem = new MenuItem("showComplementaryMenuItem", "Complementary", "check", true);
            	var showSpacesMenuItem:MenuItem = new MenuItem("showSpacesMenuItem", "Spaces", "check", true);
            	var showAA1MenuItem:MenuItem = new MenuItem("showAA1MenuItem", "Sequence AA", "check", false);
				var showAA1RevComMenuItem:MenuItem = new MenuItem("showAA1RevComMenuItem", "RevCom AA", "check", false);
            	var showAA3MenuItem:MenuItem = new MenuItem("showAA3MenuItem", "Three Letter AA", "check", false);
            	var showFeatureLabelsMenuItem:MenuItem = new MenuItem("showFeatureLabelsMenuItem", "Feature Labels", "check", true);
            	var showCutSiteLabelsMenuItem:MenuItem = new MenuItem("showCutSiteLabelsMenuItem", "Cut Site Labels", "check", true);
				viewMenuItem.addSubItem(showPieMenuItem);
				viewMenuItem.addSubItem(showRailMenuItem);
				viewMenuItem.addSubItem(separatorMenuItem);
            	viewMenuItem.addSubItem(showFeaturesMenuItem);
            	viewMenuItem.addSubItem(showCutSitesMenuItem);
            	viewMenuItem.addSubItem(showORFsMenuItem);
            	viewMenuItem.addSubItem(separatorMenuItem);
            	viewMenuItem.addSubItem(showComplementaryMenuItem);
            	viewMenuItem.addSubItem(showSpacesMenuItem);
            	viewMenuItem.addSubItem(showAA1MenuItem);
				viewMenuItem.addSubItem(showAA1RevComMenuItem);
            	//viewMenuItem.addSubItem(showAA3MenuItem);
            	viewMenuItem.addSubItem(separatorMenuItem);
            	viewMenuItem.addSubItem(showFeatureLabelsMenuItem);
            	viewMenuItem.addSubItem(showCutSiteLabelsMenuItem);
            	
				// Tools
            	var toolsMenuItem:MenuItem = new MenuItem("editMenuItem", "Tools");
            	var preferencesMenuItem:MenuItem = new MenuItem("preferencesMenuItem", "Preferences");
            	var restrictionEnzymesManagerMenuItem:MenuItem = new MenuItem("restrictionEnzymesManagerMenuItem", "Restriction Enzymes Manager");
            	var createNewFeatureMenuItem:MenuItem = new MenuItem("createNewFeatureMenuItem", "Create New Feature");
                var simulateDigestionMenuItem:MenuItem = new MenuItem("simulateDigestionMenuItem", "Simulate Digestion");
                var propertiesMenuItem:MenuItem = new MenuItem("propertiesMenuItem", "Properties");
            	toolsMenuItem.addSubItem(createNewFeatureMenuItem);
            	toolsMenuItem.addSubItem(restrictionEnzymesManagerMenuItem);
                toolsMenuItem.addSubItem(simulateDigestionMenuItem);
                toolsMenuItem.addSubItem(propertiesMenuItem);
                toolsMenuItem.addSubItem(separatorMenuItem);
            	toolsMenuItem.addSubItem(preferencesMenuItem);
            	
            	// Help
            	var helpMenuItem:MenuItem = new MenuItem("helpMenuItem", "Help");
            	var aboutMenuItem:MenuItem = new MenuItem("aboutMenuItem", "About");
				var suggestFeatureMenuItem:MenuItem = new MenuItem("suggestFeatureMenuItem", "Suggest Feature");
				var reportBugMenuItem:MenuItem = new MenuItem("reportBugMenuItem", "Report Bug");
				helpMenuItem.addSubItem(suggestFeatureMenuItem);
				helpMenuItem.addSubItem(reportBugMenuItem);
				helpMenuItem.addSubItem(separatorMenuItem);
            	helpMenuItem.addSubItem(aboutMenuItem);
				
            	menuItems = [fileMenuItem, editMenuItem, viewMenuItem, toolsMenuItem, helpMenuItem];
            	
            	// File
            	menuItemsMap["fileMenuItem"] = fileMenuItem;
                menuItemsMap["saveProjectMenuItem"] = saveProjectMenuItem;
                menuItemsMap["saveProjectAsMenuItem"] = saveProjectAsMenuItem;
                menuItemsMap["projectPropertiesMenuItem"] = projectPropertiesMenuItem;
                menuItemsMap["printMenuItem"] = printMenuItem;
                menuItemsMap["importSequenceMenuItem"] = importSequenceMenuItem;
                menuItemsMap["saveToRegistryMenuItem"] = saveToRegistryMenuItem;
                menuItemsMap["downloadSequenceMenuItem"] = downloadSequenceMenuItem;
                menuItemsMap["downloadSBOLMenuItem"] = downloadSBOLMenuItem;
            	
                // File->Print
                menuItemsMap["printSequenceMenuItem"] = printSequenceMenuItem;
                menuItemsMap["printRailMenuItem"] = printRailMenuItem;
                menuItemsMap["printPieMenuItem"] = printPieMenuItem;
                
            	// Edit
            	menuItemsMap["editMenuItem"] = editMenuItem;
            	menuItemsMap["undoMenuItem"] = undoMenuItem;
            	menuItemsMap["redoMenuItem"] = redoMenuItem;
            	menuItemsMap["copyMenuItem"] = copyMenuItem;
            	menuItemsMap["cutMenuItem"] = cutMenuItem;
            	menuItemsMap["pasteMenuItem"] = pasteMenuItem;
				menuItemsMap["safeEditingMenuItem"] = safeEditingMenuItem;
            	menuItemsMap["selectMenuItem"] = selectMenuItem;
                menuItemsMap["selectInverseMenuItem"] = selectInverseMenuItem;
            	menuItemsMap["selectAllMenuItem"] = selectAllMenuItem;
				menuItemsMap["gotoMenuItem"] = gotoMenuItem;
				menuItemsMap["findMenuItem"] = findMenuItem;
                menuItemsMap["reverseComplementMenuItem"] = reverseComplementMenuItem;
                menuItemsMap["rebaseMenuItem"] = rebaseMenuItem;
                
            	// View
            	menuItemsMap["viewMenuItem"] = viewMenuItem;
				menuItemsMap["showRailMenuItem"] = showRailMenuItem;
				menuItemsMap["showPieMenuItem"] = showPieMenuItem;
            	menuItemsMap["showFeaturesMenuItem"] = showFeaturesMenuItem;
            	menuItemsMap["showCutSitesMenuItem"] = showCutSitesMenuItem;
            	menuItemsMap["showComplementaryMenuItem"] = showComplementaryMenuItem;
            	menuItemsMap["showSpacesMenuItem"] = showSpacesMenuItem;
            	menuItemsMap["showORFsMenuItem"] = showORFsMenuItem;
            	menuItemsMap["showAA1MenuItem"] = showAA1MenuItem;
				menuItemsMap["showAA1RevComMenuItem"] = showAA1RevComMenuItem;
            	menuItemsMap["showAA3MenuItem"] = showAA3MenuItem;
            	menuItemsMap["showFeatureLabelsMenuItem"] = showFeatureLabelsMenuItem;
            	menuItemsMap["showCutSiteLabelsMenuItem"] = showCutSiteLabelsMenuItem;
            	
            	// Tools
            	menuItemsMap["createNewFeatureMenuItem"] = createNewFeatureMenuItem;
            	menuItemsMap["restrictionEnzymesManagerMenuItem"] = restrictionEnzymesManagerMenuItem;
                menuItemsMap["simulateDigestionMenuItem"] = simulateDigestionMenuItem;
                menuItemsMap["propertiesMenuItem"] = propertiesMenuItem;
            	menuItemsMap["preferencesMenuItem"] = preferencesMenuItem;
            	
            	// Help
            	menuItemsMap["helpMenuItem"] = helpMenuItem;
				menuItemsMap["suggestFeatureMenuItem"] = suggestFeatureMenuItem;
				menuItemsMap["reportBugMenuItem"] = reportBugMenuItem;
            	menuItemsMap["aboutMenuItem"] = aboutMenuItem;
            }
            
            private function onMenuItemClick(event:MenuEvent):void
            {
            	var menuItem:MenuItem = event.item as MenuItem;
            	
				if(menuItem.id == "showRailMenuItem") {
					dispatchEvent(new MenuItemEvent(SHOW_RAIL, menuItem));
				} if(menuItem.id == "showPieMenuItem") {
					dispatchEvent(new MenuItemEvent(SHOW_PIE, menuItem));
				} if(menuItem.id == "showFeaturesMenuItem") {
            		dispatchEvent(new MenuItemEvent(SHOW_FEATURES_STATE_CHANGED, menuItem));
            	} else if(menuItem.id == "showCutSitesMenuItem") {
            		dispatchEvent(new MenuItemEvent(SHOW_CUTSITES_STATE_CHANGED, menuItem));
            	} else if(menuItem.id == "showORFsMenuItem") {
            		dispatchEvent(new MenuItemEvent(SHOW_ORFS_STATE_CHANGED, menuItem));
            	} else if(menuItem.id == "showComplementaryMenuItem") {
            		dispatchEvent(new MenuItemEvent(SHOW_COMPLEMENTARY_STATE_CHANGED, menuItem));
            	} else if(menuItem.id == "showSpacesMenuItem") {
            		dispatchEvent(new MenuItemEvent(SHOW_SPACES_STATE_CHANGED, menuItem));
            	} else if(menuItem.id == "showAA1MenuItem") {
            		dispatchEvent(new MenuItemEvent(SHOW_AA1_STATE_CHANGED, menuItem));
				} else if(menuItem.id == "showAA1RevComMenuItem") {
					dispatchEvent(new MenuItemEvent(SHOW_AA1_REVCOM_STATE_CHANGED, menuItem));
            	} else if(menuItem.id == "showAA3MenuItem") {
            		dispatchEvent(new MenuItemEvent(SHOW_AA3_STATE_CHANGED, menuItem));
            	} else if(menuItem.id == "showFeatureLabelsMenuItem") {
            		dispatchEvent(new MenuItemEvent(SHOW_FEATURE_LABELS_STATE_CHANGED, menuItem));
            	} else if(menuItem.id == "showCutSiteLabelsMenuItem") {
            		dispatchEvent(new MenuItemEvent(SHOW_CUT_SITE_LABELS_STATE_CHANGED, menuItem));
            	} else if(menuItem.id == "selectMenuItem") {
            		dispatchEvent(new MenuItemEvent(SHOW_SELECT_BY_RANGE_DIALOG, menuItem));
            	} else if(menuItem.id == "preferencesMenuItem") {
            		dispatchEvent(new MenuItemEvent(SHOW_PREFERENCES_DIALOG, menuItem));
				} else if(menuItem.id == "propertiesMenuItem") {
					dispatchEvent(new MenuItemEvent(SHOW_PROPERTIES_DIALOG, menuItem));
				} else if(menuItem.id == "printSequenceMenuItem") {
					dispatchEvent(new MenuItemEvent(PRINT_SEQUENCE, menuItem));
				} else if(menuItem.id == "printPieMenuItem") {
					dispatchEvent(new MenuItemEvent(PRINT_PIE, menuItem));
				} else if(menuItem.id == "printRailMenuItem") {
					dispatchEvent(new MenuItemEvent(PRINT_RAIL, menuItem));
            	} else if(menuItem.id == "aboutMenuItem") {
            		dispatchEvent(new MenuItemEvent(SHOW_ABOUT_DIALOG, menuItem));
            	} else if(menuItem.id == "undoMenuItem") {
            		dispatchEvent(new MenuItemEvent(UNDO, menuItem));
            	} else if(menuItem.id == "redoMenuItem") {
            		dispatchEvent(new MenuItemEvent(REDO, menuItem));
            	} else if(menuItem.id == "copyMenuItem") {
            		dispatchEvent(new MenuItemEvent(COPY, menuItem));
            	} else if(menuItem.id == "cutMenuItem") {
            		dispatchEvent(new MenuItemEvent(CUT, menuItem));
            	} else if(menuItem.id == "pasteMenuItem") {
            		dispatchEvent(new MenuItemEvent(PASTE, menuItem));
				} else if(menuItem.id == "safeEditingMenuItem") {
					dispatchEvent(new MenuItemEvent(SAFE_EDITING_CHANGED, menuItem));
            	} else if(menuItem.id == "selectAllMenuItem") {
            		dispatchEvent(new MenuItemEvent(SELECT_ALL, menuItem));
            	} else if(menuItem.id == "selectInverseMenuItem") {
                    dispatchEvent(new MenuItemEvent(SELECT_INVERSE, menuItem));
              	} else if(menuItem.id == "createNewFeatureMenuItem") {
            		dispatchEvent(new MenuItemEvent(SHOW_CREATE_NEW_FEATURE_DIALOG, menuItem));
            	} else if(menuItem.id == "restrictionEnzymesManagerMenuItem") {
            		dispatchEvent(new MenuItemEvent(SHOW_RESTRICTION_ENZYMES_MANAGER_DIALOG, menuItem));
                } else if(menuItem.id == "simulateDigestionMenuItem") {
                    dispatchEvent(new MenuItemEvent(SHOW_SIMULATE_DIGESTION_DIALOG, menuItem));
				} else if(menuItem.id == "gotoMenuItem") {
					dispatchEvent(new MenuItemEvent(SHOW_GOTO_DIALOG, menuItem));
				} else if(menuItem.id == "findMenuItem") {
					dispatchEvent(new MenuItemEvent(SHOW_FIND_DIALOG, menuItem));
				} else if(menuItem.id == "reportBugMenuItem") {
					dispatchEvent(new MenuItemEvent(GO_REPORT_BUG_WEB_LINK, menuItem));
				} else if(menuItem.id == "suggestFeatureMenuItem") {
					dispatchEvent(new MenuItemEvent(GO_SUGGEST_FEATURE_WEB_LINK, menuItem));
				} else if(menuItem.id == "saveProjectMenuItem") {
					dispatchEvent(new MenuItemEvent(SAVE_PROJECT, menuItem));
                } else if(menuItem.id == "saveProjectAsMenuItem") {
                    dispatchEvent(new MenuItemEvent(SAVE_PROJECT_AS, menuItem));
                } else if(menuItem.id == "projectPropertiesMenuItem") {
                    dispatchEvent(new MenuItemEvent(SHOW_PROJECT_PROPERTIES_DIALOG, menuItem));
            	} else if(menuItem.id == "reverseComplementMenuItem") {
                    dispatchEvent(new MenuItemEvent(REVERSE_COMPLEMENT, menuItem));
                } else if(menuItem.id == "importSequenceMenuItem") {
                    dispatchEvent(new MenuItemEvent(IMPORT_SEQUENCE, menuItem));
                } else if(menuItem.id == "rebaseMenuItem") {
                    dispatchEvent(new MenuItemEvent(REBASE_SEQUENCE, menuItem));
                } else if(menuItem.id == "saveToRegistryMenuItem") {
                    dispatchEvent(new MenuItemEvent(SAVE_TO_REGISTRY, menuItem));
                } else if(menuItem.id == "downloadSequenceMenuItem") {
                    dispatchEvent(new MenuItemEvent(DOWNLOAD_SEQUENCE, menuItem));
                } else if(menuItem.id == "downloadSBOLMenuItem") {
                    dispatchEvent(new MenuItemEvent(DOWNLOAD_SBOL, menuItem));
                }
            }
		]]>
	</mx:Script>
	
	<mx:Style>
		.subMenu { openDuration: 0; }
	</mx:Style>
	
	<mx:MenuBar 
		id="mainMenu" 
		dataProvider="{ menuItems }" 
		labelField="label" 
		width="100%"
		menuStyleName ="subMenu" 
		itemClick="onMenuItemClick(event)"/>
</mx:Box>
