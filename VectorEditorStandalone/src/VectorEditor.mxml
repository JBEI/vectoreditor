<?xml version="1.0" encoding="utf-8"?>
<mx:Application
	layout="horizontal" 
	width="100%" 
	height="100%" 
	styleName="plain" 
	verticalScrollPolicy="off"
	creationComplete="onCreationComplete(event)"
	applicationComplete="onApplicationComplete(event)"
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:ui="org.jbei.registry.view.ui.*">
	
    <mx:Script>
        <![CDATA[
            import mx.controls.Alert;
            
            import org.hasseg.externalMouseWheel.ExternalMouseWheelSupport;
            import org.jbei.lib.utils.SystemUtils;
            import org.jbei.registry.ApplicationFacade;
            
            private var mouseWheelSupport:ExternalMouseWheelSupport = null;
            
            // Event Handlers
            private function onCreationComplete(event:Event):void
            {
                ApplicationFacade.getInstance().initializeControls(applicationPanel);
                
                ApplicationFacade.getInstance().initializeParameters(Application.application.parameters.sessionId, Application.application.parameters.entryId, Application.application.parameters.projectId, Application.application.parameters.url);
            }
            
            private function onApplicationComplete(event:Event):void
            {
                if(SystemUtils.isMacOS()) { // We need this only for Mac in order to make mouse wheel to work in browser
                    mouseWheelSupport = ExternalMouseWheelSupport.getInstance(stage);
                    mouseWheelSupport.dispatchingObjectDeterminationMethod = ExternalMouseWheelSupport.COPY_MOUSEMOVE_EVENTS;
                }
                
                var paramObj:Object = null;
                if (this.root != null && this.root.loaderInfo != null && this.root.loaderInfo.parameters != null) {
                    paramObj = this.root.loaderInfo.parameters;
                }
                
                //update paths for SBOL/Genbank conversion XML RPC service
                if (paramObj != null) {
                    var convertSBOLServerLocationKey:String = "convertSBOLXMLRPCServerLocation";
                    var convertSBOLServicePathKey:String = "convertSBOLXMLRPCServicePath";
                    
                    if (paramObj[convertSBOLServerLocationKey] != null) {
                        ApplicationFacade.getInstance().convertSBOLXMLRPCServerLocation = paramObj[convertSBOLServerLocationKey];
                    }
                    
                    if (paramObj[convertSBOLServicePathKey] != null) {
                        ApplicationFacade.getInstance().convertSBOLXMLRPCServicePath = paramObj[convertSBOLServicePathKey];
                    }
                }
                
                //if using the j5 server, load the cross-domain policy file that allows access to the xml rpc services
                if (ApplicationFacade.getInstance().convertSBOLXMLRPCServerLocation == "https://j5.jbei.org") {
                    Security.loadPolicyFile("https://j5.jbei.org/j5bin/crossdomain.xml");
                }
                
                CONFIG::standalone { // load sequence file passed to VE (from DE)
                    if (paramObj != null) {
                        var lengthKey:String = "fileLength";
                        var dataKey:String = "fileData";
                        
                        // check if any file parameters were passed to VE
                        if (paramObj[lengthKey] == null && paramObj[dataKey] == null) {
                            return; //no file data sent
                        }
                        
                        if (paramObj[lengthKey] != null && paramObj[lengthKey].length > 0 &&
                                paramObj[dataKey] != null && paramObj[dataKey].length > 0) {
                            var fileLength:int = paramObj[lengthKey];
                            var fileData:String = paramObj[dataKey];
                            if (fileData.length == fileLength ) {
                                ApplicationFacade.getInstance().importSequence(fileData);
                            } else if (fileData.length < fileLength) {
                                // it is possible that some browsers may not be able to handle strings large enough
                                Alert.show("Oops, it looks like your sequence file may be too large to transfer through your browser. " +
                                    "Please download the sequence file from the source and manually import it into VectorEditor, or try a different browser. ", "Error");
                            } else {
                                Alert.show("Oops, your sequence file may have been corrupted during the transfer. " +
                                    "Please download the sequence file from the source and manually import it into VectorEditor, or try again. ", "Error");
                            }
                        } else {
                            Alert.show("Were you expecting a sequence to load? If so, the data unfortunately didn't make it here properly. ", "Warning");
                        }
                    }
                }
            }
        ]]>
    </mx:Script>
    
    <ui:ApplicationPanel id="applicationPanel" width="100%" height="100%" />
</mx:Application>